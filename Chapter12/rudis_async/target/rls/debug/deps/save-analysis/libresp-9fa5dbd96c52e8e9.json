{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b","program":"/Users/nick/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","resp","/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=9fa5dbd96c52e8e9","-C","extra-filename=-9fa5dbd96c52e8e9","--out-dir","/Users/nick/Downloads/The-Complete-Rust-Programming-Reference-Guide-master/Chapter12/rudis_async/target/rls/debug/deps","-L","dependency=/Users/nick/Downloads/The-Complete-Rust-Programming-Reference-Guide-master/Chapter12/rudis_async/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/nick/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/nick/Downloads/The-Complete-Rust-Programming-Reference-Guide-master/Chapter12/rudis_async/target/rls/debug/deps/libresp-9fa5dbd96c52e8e9.rmeta"},"prelude":{"crate_id":{"name":"resp","disambiguator":[6194247052791762987,4718322214260710156]},"crate_root":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src","external_crates":[{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[8779741827445714399,2971442221542141864]}},{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[7813189136024418800,78221803746871164]}},{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[16521422805528300375,16247103097443080165]}},{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[6928156699021243209,6323046913247974479]}},{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4811915239047079672,8708313805612610773]}},{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[13085082768306091680,910093795681734952]}},{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[2050644147766463415,2002930350033655713]}},{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14957238024130938343,16286068292701033760]}},{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[2942731912066483547,10101170281504604302]}},{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8070830940391524888,2695343388122831199]}},{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/lib.rs","num":11,"id":{"name":"backtrace","disambiguator":[12638767748722904428,1875285310507904094]}},{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[1627492573080997141,12282998569957683394]}},{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/lib.rs","num":13,"id":{"name":"backtrace_sys","disambiguator":[14201820458053457770,5396282292866328666]}},{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[15969411139319329997,10460457787527223378]}}],"span":{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/lib.rs","byte_start":0,"byte_end":536,"line_start":1,"line_end":14,"column_start":1,"column_end":15}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":71},"span":{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/lib.rs","byte_start":445,"byte_end":450,"line_start":10,"line_end":10,"column_start":22,"column_end":27},"alias_span":null,"name":"Value","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":56},"span":{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/lib.rs","byte_start":478,"byte_end":484,"line_start":11,"line_end":11,"column_start":27,"column_end":33},"alias_span":null,"name":"encode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":57},"span":{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/lib.rs","byte_start":486,"byte_end":498,"line_start":11,"line_end":11,"column_start":35,"column_end":47},"alias_span":null,"name":"encode_slice","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":103},"span":{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/lib.rs","byte_start":500,"byte_end":507,"line_start":11,"line_end":11,"column_start":49,"column_end":56},"alias_span":null,"name":"Decoder","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/lib.rs","byte_start":0,"byte_end":536,"line_start":1,"line_end":14,"column_start":1,"column_end":15},"name":"","qualname":"::","value":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":17},{"krate":0,"index":41}],"decl_id":null,"docs":" RESP(Redis Serialization Protocol) Serialization for Rust.\n","sig":null,"attributes":[{"value":"warn(missing_docs)","span":{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/lib.rs","byte_start":0,"byte_end":22,"line_start":1,"line_end":1,"column_start":1,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":72},"span":{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/value.rs","byte_start":894,"byte_end":898,"line_start":13,"line_end":13,"column_start":5,"column_end":9},"name":"Null","qualname":"::value::Value::Null","value":"Value::Null","parent":{"krate":0,"index":71},"children":[],"decl_id":null,"docs":" Null bulk reply, `$-1\\r\\n`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":74},"span":{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/value.rs","byte_start":940,"byte_end":949,"line_start":15,"line_end":15,"column_start":5,"column_end":14},"name":"NullArray","qualname":"::value::Value::NullArray","value":"Value::NullArray","parent":{"krate":0,"index":71},"children":[],"decl_id":null,"docs":" Null array reply, `*-1\\r\\n`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":76},"span":{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/value.rs","byte_start":1018,"byte_end":1024,"line_start":17,"line_end":17,"column_start":5,"column_end":11},"name":"String","qualname":"::value::Value::String","value":"Value::String(String)","parent":{"krate":0,"index":71},"children":[],"decl_id":null,"docs":" For Simple Strings the first byte of the reply is \"+\".\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":79},"span":{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/value.rs","byte_start":1093,"byte_end":1098,"line_start":19,"line_end":19,"column_start":5,"column_end":10},"name":"Error","qualname":"::value::Value::Error","value":"Value::Error(String)","parent":{"krate":0,"index":71},"children":[],"decl_id":null,"docs":" For Errors the first byte of the reply is \"-\".\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":82},"span":{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/value.rs","byte_start":1169,"byte_end":1176,"line_start":21,"line_end":21,"column_start":5,"column_end":12},"name":"Integer","qualname":"::value::Value::Integer","value":"Value::Integer(i64)","parent":{"krate":0,"index":71},"children":[],"decl_id":null,"docs":" For Integers the first byte of the reply is \":\".\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":85},"span":{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/value.rs","byte_start":1248,"byte_end":1252,"line_start":23,"line_end":23,"column_start":5,"column_end":9},"name":"Bulk","qualname":"::value::Value::Bulk","value":"Value::Bulk(String)","parent":{"krate":0,"index":71},"children":[],"decl_id":null,"docs":" For Bulk Strings the first byte of the reply is \"$\".\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":88},"span":{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/value.rs","byte_start":1336,"byte_end":1343,"line_start":25,"line_end":25,"column_start":5,"column_end":12},"name":"BufBulk","qualname":"::value::Value::BufBulk","value":"Value::BufBulk(Vec<u8>)","parent":{"krate":0,"index":71},"children":[],"decl_id":null,"docs":" For Bulk <binary> Strings the first byte of the reply is \"$\".\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":91},"span":{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/value.rs","byte_start":1413,"byte_end":1418,"line_start":27,"line_end":27,"column_start":5,"column_end":10},"name":"Array","qualname":"::value::Value::Array","value":"Value::Array(Vec<Value>)","parent":{"krate":0,"index":71},"children":[],"decl_id":null,"docs":" For Arrays the first byte of the reply is \"*\".\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":71},"span":{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/value.rs","byte_start":847,"byte_end":852,"line_start":11,"line_end":11,"column_start":10,"column_end":15},"name":"Value","qualname":"::value::Value","value":"Value::{Null, NullArray, String, Error, Integer, Bulk, BufBulk, Array}","parent":null,"children":[{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":85},{"krate":0,"index":88},{"krate":0,"index":91}],"decl_id":null,"docs":" Represents a RESP value, see [Redis Protocol specification](http://redis.io/topics/protocol).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/value.rs","byte_start":1789,"byte_end":1796,"line_start":39,"line_end":39,"column_start":12,"column_end":19},"name":"is_null","qualname":"<Value>::is_null","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the value is a `Null` or `NullArray`. Returns `false` otherwise.\n # Examples\n ```\n # use self::resp::{Value};\n assert_eq!(Value::Null.is_null(), true);\n assert_eq!(Value::NullArray.is_null(), true);\n assert_eq!(Value::Integer(123).is_null(), false);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/value.rs","byte_start":2213,"byte_end":2221,"line_start":53,"line_end":53,"column_start":12,"column_end":20},"name":"is_error","qualname":"<Value>::is_error","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the value is a `Error`. Returns `false` otherwise.\n # Examples\n ```\n # use self::resp::{Value};\n assert_eq!(Value::Null.is_error(), false);\n assert_eq!(Value::Error(\"\".to_string()).is_error(), true);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/value.rs","byte_start":2605,"byte_end":2611,"line_start":67,"line_end":67,"column_start":12,"column_end":18},"name":"encode","qualname":"<Value>::encode","value":"fn (&self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Encode the value to RESP binary buffer.\n # Examples\n ```\n # use self::resp::{Value};\n let val = Value::String(\"OK正\".to_string());\n assert_eq!(val.encode(), vec![43, 79, 75, 230, 173, 163, 13, 10]);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/value.rs","byte_start":2912,"byte_end":2929,"line_start":78,"line_end":78,"column_start":12,"column_end":29},"name":"to_encoded_string","qualname":"<Value>::to_encoded_string","value":"fn (&self) -> Result<String>","parent":null,"children":[],"decl_id":null,"docs":" Encode the value to RESP string.\n # Examples\n ```\n # use self::resp::{Value};\n let val = Value::String(\"OK正\".to_string());\n assert_eq!(val.to_encoded_string().unwrap(), \"+OK正\\r\\n\");\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/value.rs","byte_start":5336,"byte_end":5352,"line_start":149,"line_end":149,"column_start":12,"column_end":28},"name":"to_string_pretty","qualname":"<Value>::to_string_pretty","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Encode the value to beautify formated string.\n # Examples\n ```\n # use self::resp::{Value};\n assert_eq!(Value::Null.to_string_pretty(), \"(Null)\");\n assert_eq!(Value::NullArray.to_string_pretty(), \"(Null Array)\");\n assert_eq!(Value::String(\"OK\".to_string()).to_string_pretty(), \"OK\");\n assert_eq!(Value::Error(\"Err\".to_string()).to_string_pretty(), \"(Error) Err\");\n assert_eq!(Value::Integer(123).to_string_pretty(), \"(Integer) 123\");\n assert_eq!(Value::Bulk(\"Bulk String\".to_string()).to_string_pretty(), \"\\\"Bulk String\\\"\");\n assert_eq!(Value::BufBulk(vec![]).to_string_pretty(), \"(Empty Buffer)\");\n assert_eq!(Value::BufBulk(vec![0, 100]).to_string_pretty(), \"(Buffer) 00 64\");\n assert_eq!(Value::Array(vec![]).to_string_pretty(), \"(Empty Array)\");\n ```","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/value.rs","byte_start":6396,"byte_end":6414,"line_start":174,"line_end":174,"column_start":12,"column_end":30},"name":"to_beautify_string","qualname":"<Value>::to_beautify_string","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" [DEPRECATED] Alias of to_string_pretty.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":56},"span":{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/serialize.rs","byte_start":15270,"byte_end":15276,"line_start":22,"line_end":22,"column_start":8,"column_end":14},"name":"encode","qualname":"::serialize::encode","value":"fn (value: &Value) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Encodes RESP value to RESP binary buffer.\n # Examples\n ```\n # use self::resp::{Value, encode};\n let val = Value::String(\"OK\".to_string());\n assert_eq!(encode(&val), vec![43, 79, 75, 13, 10]);\n ```\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":57},"span":{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/serialize.rs","byte_start":15732,"byte_end":15744,"line_start":37,"line_end":37,"column_start":8,"column_end":20},"name":"encode_slice","qualname":"::serialize::encode_slice","value":"fn (slice: &[&str]) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Encodes a slice of string to RESP binary buffer.\n It is use to create a request command on redis client.\n # Examples\n ```\n # use self::resp::encode_slice;\n let array = [\"SET\", \"a\", \"1\"];\n assert_eq!(encode_slice(&array),\n            \"*3\\r\\n$3\\r\\nSET\\r\\n$1\\r\\na\\r\\n$1\\r\\n1\\r\\n\".to_string().into_bytes());\n ```\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":103},"span":{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/serialize.rs","byte_start":17655,"byte_end":17662,"line_start":95,"line_end":95,"column_start":12,"column_end":19},"name":"Decoder","qualname":"::serialize::Decoder","value":"Decoder {  }","parent":null,"children":[{"krate":0,"index":106},{"krate":0,"index":107}],"decl_id":null,"docs":" A streaming RESP Decoder.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/serialize.rs","byte_start":18268,"byte_end":18271,"line_start":113,"line_end":113,"column_start":12,"column_end":15},"name":"new","qualname":"<Decoder>::new","value":"fn (reader: &'a mut BufReader<R>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a Decoder instance with given BufReader for decoding the RESP buffers.\n # Examples\n ```\n # use std::io::BufReader;\n # use self::resp::{Decoder, Value};","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/serialize.rs","byte_start":19078,"byte_end":19091,"line_start":134,"line_end":134,"column_start":12,"column_end":25},"name":"with_buf_bulk","qualname":"<Decoder>::with_buf_bulk","value":"fn (reader: &'a mut BufReader<R>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a Decoder instance with given BufReader for decoding the RESP buffers.\n The instance will decode bulk value to buffer bulk.\n # Examples\n ```\n # use std::io::BufReader;\n # use self::resp::{Decoder, Value};","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/serialize.rs","byte_start":19311,"byte_end":19317,"line_start":142,"line_end":142,"column_start":12,"column_end":18},"name":"decode","qualname":"<Decoder>::decode","value":"fn (&mut self) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" It will read buffers from the inner BufReader, decode it to a Value.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/value.rs","byte_start":1440,"byte_end":1445,"line_start":30,"line_end":30,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":35}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/value.rs","byte_start":6496,"byte_end":6501,"line_start":179,"line_end":179,"column_start":22,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/value.rs","byte_start":6526,"byte_end":6531,"line_start":180,"line_end":180,"column_start":22,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/serialize.rs","byte_start":17751,"byte_end":17758,"line_start":100,"line_end":100,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/value.rs","byte_start":1440,"byte_end":1445,"line_start":30,"line_end":30,"column_start":6,"column_end":11},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":71},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/value.rs","byte_start":6496,"byte_end":6501,"line_start":179,"line_end":179,"column_start":22,"column_end":27},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":71},"to":{"krate":2,"index":1545}},{"span":{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/value.rs","byte_start":6526,"byte_end":6531,"line_start":180,"line_end":180,"column_start":22,"column_end":27},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":71},"to":{"krate":2,"index":1535}},{"span":{"file_name":"/Users/nick/.cargo/git/checkouts/resp-7a9b6d5216f83d91/b415e0b/src/serialize.rs","byte_start":17751,"byte_end":17758,"line_start":100,"line_end":100,"column_start":19,"column_end":26},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":103},"to":{"krate":4294967295,"index":4294967295}}]}